import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import CubicSpline


def main_run():
    # Read the file
    with open('calib.lvm') as raw_calib_file:
        all_lines = raw_calib_file.readlines()

    # Open array to hold the relevant lines
    lines = []

    # Parse out the relevant lines
    keeping = 0
    for line in all_lines:
        if keeping > 0:
            keeping -= 1
            lines.append(line)

        elif line.startswith('***End_of_Header***'):
            keeping += 2

    # The first two lines don't matter
    lines.pop()
    lines.pop()

    # Open numpy array to hold the final treated data
    data = np.zeros(shape=(len(lines[3::2]), 4))

    # Iterate over the value lines
    for idx, line in enumerate(lines[3::2]):
        # Grab only the values we need, the rest is just junk generated by labview
        _, res1, _, t1, _, res2, _, t2 = line.split('\t')

        # Throw it into the data array after parsing it
        data[idx, :] = np.array([float(res1), float(t1), float(res2), float(t2)])

    # Save the data for the actual calibration
    np.savetxt('calib.txt', data)

    # Setup cubic splines
    dale_calib = CubicSpline(data[:, 0], data[:, 1])
    ruo2_10k_calib = CubicSpline(data[:, 2], data[:, 3])

    # Create plotting ranges
    dale_range = np.array(range(2000, 20000))
    ruo2_range = np.array(range(13000, 300000))

    # Plot the data
    fig, axs = plt.subplots(ncols=2, figsize=(7, 3))
    plt.axes(axs[0])
    plt.plot(data[:, 0], data[:, 1], '.', label='Calibration Data')
    plt.plot(dale_range, dale_calib(dale_range), label='Cubic spline fit')
    plt.ylabel('Temperature [milli-kelvin]')
    plt.xlabel('Resistance [ohm]')
    plt.title('Calibration data (DALE1500)')
    plt.grid()
    plt.legend()

    plt.axes(axs[1])

    plt.plot(data[:, 2], data[:, 3], '.', label='Calibration Data')
    plt.plot(ruo2_range, ruo2_10k_calib(ruo2_range), label='Cubic spline fit')
    plt.ylabel('Temperature [milli-kelvin]')
    plt.xlabel('Resistance [ohm]')
    plt.title('Calibration data (10k $RuO_2$)')
    plt.grid()
    plt.legend()

    plt.tight_layout()
    plt.savefig('calibrations_plot.png', dpi=300)
    plt.close()


if __name__ == '__main__':
    main_run()

